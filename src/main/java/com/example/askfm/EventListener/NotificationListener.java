package com.example.askfm.EventListener;

import com.example.askfm.dto.NotificationDTO;
import com.example.askfm.enums.NotificationType;
import com.example.askfm.maper.NotificationMapper;
import com.example.askfm.model.Notification;
import com.example.askfm.model.Post;
import com.example.askfm.model.Repost;
import com.example.askfm.model.User;
import com.example.askfm.repository.NotificationRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.context.event.EventListener;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;

@Service
@Slf4j
@RequiredArgsConstructor
public class NotificationListener {
    private final NotificationRepository notificationRepository;
    private final NotificationMapper notificationMapper;

    @EventListener
    @Async("notificationExecutor")
    public void handlePhotoBay(PhotoPurchaseEvent event) {
        try {
            log.debug("üì∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –ø–æ–∫—É–ø–∫–∏ —Ñ–æ—Ç–æ –æ—Ç {} –¥–ª—è —Ñ–æ—Ç–æ {}",
                    event.getBuyer().getUsername(), event.getPhoto().getId());

            Notification notification = Notification.builder()
                    .user(event.getPhoto().getOwner()) // –≤–ª–∞–¥–µ–ª–µ—Ü —Ñ–æ—Ç–æ –ø–æ–ª—É—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    .initiator(event.getBuyer())       // –ø–æ–∫—É–ø–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–æ–º
                    .photo(event.getPhoto())           // —Å–≤—è–∑—ã–≤–∞–µ–º —Å —Ñ–æ—Ç–æ
                    .type(NotificationType.PHOTO_PURCHASE)
                    .message(String.format("%s –∫—É–ø–∏–ª(-–∞) –≤–∞—à—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é",
                            event.getBuyer().getUsername()))
                    .createdAt(LocalDateTime.now())
                    .isRead(false)
                    .build();

            notificationRepository.save(notification);
            log.debug("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–∫—É–ø–∫–µ —Ñ–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î");
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–∫—É–ø–∫–µ —Ñ–æ—Ç–æ: {}", e.getMessage());
            throw e;
        }
    }

    @EventListener
    @Async("commentExecutor")
    public void handleCommentEvent(CommentEvent event) {
        try {
            log.debug("üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –æ—Ç {} –¥–ª—è –ø–æ—Å—Ç–∞ {}",
                    event.getCommenter().getUsername(), event.getPost().getId());

            Notification notification = Notification.builder()
                    .user(event.getPost().getAuthor()) // –∞–≤—Ç–æ—Ä –ø–æ—Å—Ç–∞ –ø–æ–ª—É—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    .initiator(event.getCommenter())   // –∫–æ–º–º–µ–Ω—Ç–∞—Ç–æ—Ä —è–≤–ª—è–µ—Ç—Å—è –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–æ–º
                    .post(event.getPost())
                    .type(NotificationType.COMMENT)
                    .message(String.format("%s –ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–ª –≤–∞—à –ø–æ—Å—Ç",
                            event.getCommenter().getUsername()))
                    .createdAt(LocalDateTime.now())
                    .isRead(false)
                    .build();

            notificationRepository.save(notification);
            log.debug("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î");
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {}", e.getMessage());
            throw e;
        }
    }



    @EventListener
    @Async("likeExecutor")
    public void handleLikeEvent(LikeEvent event) {
        try {
            log.debug("üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –ª–∞–π–∫–∞ –æ—Ç {} –¥–ª—è –ø–æ—Å—Ç–∞ {}",
                    event.getLiker().getUsername(), event.getPost().getId());

            Notification notification = Notification.builder()
                    .user(event.getPost().getAuthor())
                    .initiator(event.getLiker())
                    .post(event.getPost())
                    .type(NotificationType.LIKE)
                    .message(event.getLiker().getUsername() + " –ª–∞–π–∫–Ω—É–ª –≤–∞—à –ø–æ—Å—Ç")
                    .createdAt(LocalDateTime.now())
                    .build();

            Notification savedNotification = notificationRepository.save(notification);

            // –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å DTO –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –≤–µ—Ä–Ω—É—Ç—å
            NotificationDTO notificationDTO = notificationMapper.toDto(savedNotification);

            log.info("‚úÖ –°–æ–∑–¥–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ª–∞–π–∫–µ –¥–ª—è {}",
                    event.getPost().getAuthor().getUsername());

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ª–∞–π–∫–µ: {}", e.getMessage());
        }
    }
    @EventListener
    @Async("notificationExecutor")
    public void handleSubscriptionEvent(SubscriptionEvent event) {
        try {
            log.debug("üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç {} –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}",
                    event.getSubscriber().getUsername(),
                    event.getTargetUser().getUsername());

            Notification notification = Notification.builder()
                    .user(event.getTargetUser())         // —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∞–µ—Ç —Ç–æ—Ç, –Ω–∞ –∫–æ–≥–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å
                    .initiator(event.getSubscriber())    // –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä - —Ç–æ—Ç, –∫—Ç–æ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è
                    .type(NotificationType.SUBSCRIPTION)
                    .message(String.format("%s –ø–æ–¥–ø–∏—Å–∞–ª—Å—è(-–∞—Å—å) –Ω–∞ –≤–∞—Å",
                            event.getSubscriber().getUsername()))
                    .createdAt(LocalDateTime.now())
                    .isRead(false)
                    .build();

            Notification savedNotification = notificationRepository.save(notification);

            NotificationDTO notificationDTO = notificationMapper.toDto(savedNotification);

            log.info("‚úÖ –°–æ–∑–¥–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ –¥–ª—è {}",
                    event.getTargetUser().getUsername());

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ: {}", e.getMessage());
            throw e;
        }
    }


    @EventListener
    @Async("eventExecutor")
    public void handleRepostEvent(RepostEvent repostEvent) {
        try {
            log.debug("üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–ø–æ—Å—Ç–∞ –æ—Ç {} –ø–æ—Å—Ç–∞ {}",
                    repostEvent.getRepostUser().getUsername(),
                    repostEvent.getRepost().getOriginalPost().getId());

            Repost repost = repostEvent.getRepost();
            Notification notification = Notification.builder()
                    .user(repost.getOriginalPost().getAuthor())
                    .initiator(repost.getUser())
                    .post(repost.getOriginalPost())
                    .repost(repost)
                    .type(NotificationType.REPOST)
                    .message(NotificationType.REPOST.getActionMessage())
                    .createdAt(LocalDateTime.now())
                    .isRead(false)
                    .build();

            Notification savedNotification = notificationRepository.save(notification);
            log.info("‚úÖ –°–æ–∑–¥–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–ø–æ—Å—Ç–µ –¥–ª—è {}",
                    repost.getOriginalPost().getAuthor().getUsername());

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–ø–æ—Å—Ç–µ: {}", e.getMessage());
            throw e;
        }
    }
}
