package com.example.askfm.service;


import com.example.askfm.dto.CreatePhotoRequest;
import com.example.askfm.dto.PhotoDTO;
import com.example.askfm.dto.TransactionDTO;
import com.example.askfm.enums.TransactionStatus;
import com.example.askfm.enums.TransactionType;
import com.example.askfm.maper.PhotoMapper;
import com.example.askfm.model.Photo;
import com.example.askfm.model.UnlockedPhoto;
import com.example.askfm.model.User;
import com.example.askfm.repository.PhotoRepository;
import com.example.askfm.repository.TransactionRepository;
import com.example.askfm.repository.UnlockedPhotoRepository;
import com.example.askfm.repository.UserRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.cache.Cache;
import org.springframework.cache.CacheManager;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.io.IOException;
import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.function.Function;
@Slf4j
@Service
@RequiredArgsConstructor
@Transactional
public class PhotoService {
    private final PhotoRepository photoRepository;
    private final UserRepository userRepository;
    private final PhotoMapper photoMapper;
    private final UnlockedPhotoRepository unlockedPhotoRepository;
    private final TransactionService transactionService;
    private final NotificationService notificationService;
    private final CacheManager cacheManager;


    // –ú–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ
    public PhotoDTO createPhoto(CreatePhotoRequest request, String username, byte[] imageData) throws IOException {
        log.debug("üì∏ –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", username);

        User owner = userRepository.findByUsername(username)
                .orElseThrow(() -> new RuntimeException("User not found"));

        Photo photo = photoMapper.toEntity(request, owner, imageData);
        Photo savedPhoto = photoRepository.save(photo);
        log.debug("‚úÖ –§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î, id: {}", savedPhoto.getId());

        // –û—á–∏—â–∞–µ–º –∫–µ—à —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        Cache photoCache = cacheManager.getCache("userPhotos");
        if (photoCache != null) {
            photoCache.invalidate(); // –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞
            log.debug("üóëÔ∏è –ö–µ—à —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ç–æ");
        } else {
            log.warn("‚ö†Ô∏è –ö–µ—à —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
        }

        PhotoDTO photoDTO = photoMapper.toDTO(savedPhoto, owner);
        log.debug("üéâ –§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, –æ–ø–∏—Å–∞–Ω–∏–µ: {}", photoDTO.getDescription());

        return photoDTO;
    }


    @Transactional(readOnly = true)
    public PhotoDTO getPhoto(Long photoId, String username) {
        Photo photo = photoRepository.findById(photoId)
                .orElseThrow(() -> new RuntimeException("Photo not found"));

        User user = userRepository.findByUsername(username)
                .orElseThrow(() -> new RuntimeException("User not found"));

        return photoMapper.toDTO(photo, user);
    }

    // –ú–µ—Ç–æ–¥ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ñ–æ—Ç–æ
    @Transactional
    public PhotoDTO unlockPhoto(Long photoId, String username) {
        log.debug("üîì –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ñ–æ—Ç–æ id: {} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", photoId, username);

        Photo photo = photoRepository.findById(photoId)
                .orElseThrow(() -> new RuntimeException("Photo not found"));
        log.debug("üì∏ –§–æ—Ç–æ –Ω–∞–π–¥–µ–Ω–æ, –≤–ª–∞–¥–µ–ª–µ—Ü: {}", photo.getOwner().getUsername());

        User buyer = userRepository.findByUsername(username)
                .orElseThrow(() -> new RuntimeException("User not found"));

        User seller = photo.getOwner();

        if (seller.getUsername().equals(username)) {
            log.warn("‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {}", username);
            throw new RuntimeException("You cannot unlock your own photo");
        }

        if (unlockedPhotoRepository.existsByUserAndPhoto(buyer, photo)) {
            log.warn("‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ñ–æ—Ç–æ id: {} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {}", photoId, username);
            throw new RuntimeException("You have already unlocked this photo");
        }

        if (buyer.getBalance().compareTo(photo.getPrice()) < 0) {
            log.warn("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", username);
            throw new RuntimeException("Insufficient balance to unlock photo");
        }

        TransactionDTO transactionDTO = null;

        try {
            log.debug("üí∞ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è —Ñ–æ—Ç–æ id: {}", photoId);

            transactionDTO = transactionService.createTransaction(
                    buyer,
                    seller,
                    photo,
                    photo.getPrice(),
                    TransactionType.PHOTO_PURCHASE
            );

            buyer.setBalance(buyer.getBalance().subtract(photo.getPrice()));
            seller.setBalance(seller.getBalance().add(photo.getPrice()));
            userRepository.save(buyer);
            userRepository.save(seller);
            log.debug("‚úÖ –ë–∞–ª–∞–Ω—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–±–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ");

            UnlockedPhoto unlockedPhoto = new UnlockedPhoto();
            unlockedPhoto.setUser(buyer);
            unlockedPhoto.setPhoto(photo);
            unlockedPhoto.setUnlockedAt(LocalDateTime.now());
            unlockedPhotoRepository.save(unlockedPhoto);
            log.debug("‚úÖ –ó–∞–ø–∏—Å—å –æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞");

            transactionService.updateTransactionStatus(transactionDTO.getId(), TransactionStatus.COMPLETED);

            notificationService.notifyAboutPhotoEvent(buyer, photo);
            log.debug("üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–∫—É–ø–∫–µ —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ");

            // –û—á–∏—â–∞–µ–º –≤–µ—Å—å –∫–µ—à —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
            Cache photoCache = cacheManager.getCache("userPhotos");
            if (photoCache != null) {
                photoCache.invalidate();
                log.debug("üóëÔ∏è –ö–µ—à —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω –ø–æ—Å–ª–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏");
            } else {
                log.warn("‚ö†Ô∏è –ö–µ—à —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
            }

            PhotoDTO result = photoMapper.toDTO(photo, buyer);
            log.debug("üéâ –§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ");
            return result;

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ —Ñ–æ—Ç–æ: {}", e.getMessage());
            if (transactionDTO != null) {
                transactionService.updateTransactionStatus(transactionDTO.getId(), TransactionStatus.FAILED);
                log.debug("‚ùå –°—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ FAILED");
            }
            throw new RuntimeException("Failed to process transaction: " + e.getMessage());
        }
    }


    public Function<PhotoDTO, Boolean> createPhotoUnlockChecker(String username) {
        return photoDTO -> {
            if (username == null) return false;

            User user = userRepository.findByUsername(username)
                    .orElseThrow(() -> new RuntimeException("User not found"));

            return unlockedPhotoRepository.existsByUserIdAndPhotoId(
                    user.getId(),
                    photoDTO.getId()
            );
        };
    }


    // –ú–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    public Page<PhotoDTO> getUserPhotosByUsername(String username, String currentUsername, Pageable pageable) {
        Cache photoCache = cacheManager.getCache("userPhotos");
        String cacheKey = createCacheKey(username, currentUsername, pageable);

        // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫–µ—à–∞
        Page<PhotoDTO> cachedPhotos = photoCache.get(cacheKey, Page.class);
        if (cachedPhotos != null) {
            log.debug("‚úÖ –ü–æ–ª—É—á–µ–Ω—ã —Ñ–æ—Ç–æ –∏–∑ –∫–µ—à–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}, –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—é—â–∏–π: {}, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {}",
                    username, currentUsername, pageable.getPageNumber());
            return cachedPhotos;
        }

        log.debug("‚õî –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ –∏–∑ –ë–î –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}, –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—é—â–∏–π: {}, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {}",
                username, currentUsername, pageable.getPageNumber());

        Page<Photo> photoPage = photoRepository.findByOwnerUsername(username, pageable);

        User currentUser = null;
        if (currentUsername != null) {
            currentUser = userRepository.findByUsername(currentUsername)
                    .orElseThrow(() -> new RuntimeException("Current user not found"));
        }

        User finalCurrentUser = currentUser;
        Page<PhotoDTO> photoDTOs = photoPage.map(photo -> photoMapper.toDTO(photo, finalCurrentUser));

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
        photoCache.put(cacheKey, photoDTOs);
        log.debug("üîπ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∫–µ—à {} —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}, –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—é—â–∏–π: {}, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {}",
                photoDTOs.getContent().size(), username, currentUsername, pageable.getPageNumber());

        return photoDTOs;
    }
    private String createCacheKey(String username, String currentUsername, Pageable pageable) {
        return String.format("user_photos:%s:viewer:%s:page:%d:size:%d",
                username,
                currentUsername != null ? currentUsername : "anonymous",
                pageable.getPageNumber(),
                pageable.getPageSize());
    }


    @Transactional(readOnly = true)
    public Photo getPhotoEntity(Long photoId) {
        return photoRepository.findById(photoId)
                .orElseThrow(() -> new RuntimeException("Photo not found"));
    }
    }