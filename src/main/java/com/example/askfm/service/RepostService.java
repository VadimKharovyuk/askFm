
package com.example.askfm.service;

import com.example.askfm.dto.CreateRepostRequest;
import com.example.askfm.dto.RepostDTO;
import com.example.askfm.exception.*;
import com.example.askfm.maper.RepostMapper;
import com.example.askfm.model.Post;
import com.example.askfm.model.Repost;
import com.example.askfm.model.User;
import com.example.askfm.repository.NotificationRepository;
import com.example.askfm.repository.PostRepository;
import com.example.askfm.repository.RepostRepository;
import com.example.askfm.repository.UserRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.cache.Cache;
import org.springframework.cache.CacheManager;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;

@Slf4j
@Service
@Transactional
@RequiredArgsConstructor
public class RepostService {
    private final RepostRepository repostRepository;
    private final PostRepository postRepository;
    private final UserRepository userRepository;
    private final RepostMapper repostMapper;
    private final CacheManager cacheManager;
    private final NotificationService notificationService;
    private final NotificationRepository notificationRepository;

    @Transactional
    public RepostDTO createRepost(Long userId, CreateRepostRequest request) {
        log.debug("üìù –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ø–æ—Å—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}, –ø–æ—Å—Ç: {}", userId, request.getPostId());

        User user = userRepository.findById(userId)
                .orElseThrow(() -> {
                    log.error("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {}", userId);
                    return new UserNotFoundException("User not found with id: " + userId);
                });

        Post originalPost = postRepository.findById(request.getPostId())
                .orElseThrow(() -> {
                    log.error("‚ùå –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {}", request.getPostId());
                    return new PostNotFoundException(request.getPostId());
                });

        validateRepostCreation(user, originalPost);

        Repost repost = buildRepost(user, originalPost);
        Repost savedRepost = repostRepository.save(repost);
        log.debug("‚ú® –†–µ–ø–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î");

        RepostDTO repostDTO = repostMapper.toDto(savedRepost, user.getUsername());

        notificationService.notifyAboutRepost(user,savedRepost);

        // –û—á–∏—â–∞–µ–º –∫–µ—à
        Cache cache = cacheManager.getCache("posts");
        if (cache != null) {
            cache.clear();
            log.debug("üßπ –ö–µ—à –ø–æ—Å—Ç–æ–≤ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ø–æ—Å—Ç–∞");
        }

        log.info("‚úÖ –°–æ–∑–¥–∞–Ω —Ä–µ–ø–æ—Å—Ç {} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {}", request.getPostId(), user.getUsername());
        return repostDTO;
    }

    @Transactional
    public void deleteRepost(Long userId, Long postId) {
        log.debug("üìù –ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–ø–æ—Å—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}, –ø–æ—Å—Ç: {}", userId, postId);

        Repost repost = repostRepository.findByUserIdAndOriginalPostId(userId, postId)
                .orElseThrow(() -> {
                    log.error("‚ùå –†–µ–ø–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}, –ø–æ—Å—Ç: {}", userId, postId);
                    return new RepostNotFoundException("Repost not found");
                });

        validateRepostDeletion(repost, userId);

        // Delete associated notifications first
        deleteRepostNotifications(repost.getId());

        String username = repost.getUser().getUsername();
        repostRepository.delete(repost);
        log.debug("‚ú® –†–µ–ø–æ—Å—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –ë–î");

        // –û—á–∏—â–∞–µ–º –∫–µ—à
        Cache cache = cacheManager.getCache("posts");
        if (cache != null) {
            cache.clear();
            log.debug("üßπ –ö–µ—à –ø–æ—Å—Ç–æ–≤ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–ø–æ—Å—Ç–∞");
        }

        log.info("‚úÖ –†–µ–ø–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {}", username);
    }

    /**
     * Delete all notifications associated with a repost
     */
    private void deleteRepostNotifications(Long repostId) {
        log.debug("üîî –£–¥–∞–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —Ä–µ–ø–æ—Å—Ç–æ–º ID: {}", repostId);
        try {
            // Assuming you have a notificationRepository
            notificationRepository.deleteByRepostId(repostId);
            log.debug("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ä–µ–ø–æ—Å—Ç–æ–º, —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã");
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —Ä–µ–ø–æ—Å—Ç–æ–º: {}", e.getMessage(), e);
            throw e;
        }
    }
//    @Transactional
//    public void deleteRepost(Long userId, Long postId) {
//        log.debug("üìù –ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–ø–æ—Å—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}, –ø–æ—Å—Ç: {}", userId, postId);
//
//        Repost repost = repostRepository.findByUserIdAndOriginalPostId(userId, postId)
//                .orElseThrow(() -> {
//                    log.error("‚ùå –†–µ–ø–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}, –ø–æ—Å—Ç: {}", userId, postId);
//                    return new RepostNotFoundException("Repost not found");
//                });
//
//        validateRepostDeletion(repost, userId);
//
//        String username = repost.getUser().getUsername();
//        repostRepository.delete(repost);
//        log.debug("‚ú® –†–µ–ø–æ—Å—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –ë–î");
//
//        // –û—á–∏—â–∞–µ–º –∫–µ—à
//        Cache cache = cacheManager.getCache("posts");
//        if (cache != null) {
//            cache.clear();
//            log.debug("üßπ –ö–µ—à –ø–æ—Å—Ç–æ–≤ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–ø–æ—Å—Ç–∞");
//        }
//
//        log.info("‚úÖ –†–µ–ø–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {}", username);
//    }
    private void validateRepostCreation(User user, Post originalPost) {
        if (repostRepository.existsByUserAndOriginalPost(user, originalPost)) {
            log.error("‚ùå –†–µ–ø–æ—Å—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}, –ø–æ—Å—Ç: {}",
                    user.getId(), originalPost.getId());
            throw new UnauthorizedException("Repost already exists");
        }
    }

    private void validateRepostDeletion(Repost repost, Long userId) {
        if (!repost.getUser().getId().equals(userId)) {
            log.error("‚ùå –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —á—É–∂–æ–≥–æ —Ä–µ–ø–æ—Å—Ç–∞. UserId: {}, RepostUserId: {}",
                    userId, repost.getUser().getId());
            throw new UnauthorizedException("Cannot delete another user's repost");
        }
    }

    private Repost buildRepost(User user, Post originalPost) {
        return Repost.builder()
                .user(user)
                .originalPost(originalPost)
                .repostedAt(LocalDateTime.now())
                .build();
    }

}