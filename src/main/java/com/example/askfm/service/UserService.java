package com.example.askfm.service;

import com.example.askfm.config.CacheMonitor;
import com.example.askfm.dto.*;
import com.example.askfm.enums.UserRole;
import com.example.askfm.exception.UserNotFoundException;
import com.example.askfm.maper.UserMapper;
import com.example.askfm.model.BlockInfo;
import com.example.askfm.model.User;
import com.example.askfm.repository.BlockInfoRepository;
import com.example.askfm.repository.UserRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.cache.Cache;
import org.springframework.cache.CacheManager;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.CachePut;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.cache.annotation.Caching;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.security.authentication.LockedException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.StringUtils;

import java.math.BigDecimal;
import java.security.SecureRandom;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.ThreadLocalRandom;
import java.util.stream.Collectors;

@Service
@Transactional
@Slf4j
@RequiredArgsConstructor
public class UserService implements UserDetailsService {
    private final UserRepository userRepository;
    private final PasswordEncoder passwordEncoder;
    private final SubscriptionService subscriptionService ;
    private final ImageService imageService;
    private  final CacheManager cacheManager;
    private final UserMapper userMapper;
private final BlockInfoRepository blockInfoRepository;


    @Override
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
        User user = userRepository.findByUsername(username)
                .orElseThrow(() -> new UsernameNotFoundException("User not found with username: " + username));

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å –Ω–∞ null –∏–ª–∏ –ø—É—Å—Ç–æ—Ç—É
        if (user.getPassword() == null || user.getPassword().isEmpty()) {
            log.error("User {} has empty password", username);
            throw new IllegalStateException("User has no password set");
        }

        if (user.isLocked()) {
            throw new LockedException("–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. " +
                    (user.getLockReason() != null ? "–ü—Ä–∏—á–∏–Ω–∞: " + user.getLockReason() : ""));
        }

        return org.springframework.security.core.userdetails.User.builder()
                .username(user.getUsername())
                .password(user.getPassword())
                .roles(user.getRole().name())
                .accountLocked(user.isLocked())
                .build();
    }

    public User registerNewUser(UserRegistrationDTO registrationDTO) {
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if (registrationDTO.getPassword() == null || registrationDTO.getPassword().isEmpty()) {
            throw new IllegalArgumentException("Password cannot be empty");
        }

        if (userRepository.existsByUsername(registrationDTO.getUsername())) {
            throw new IllegalArgumentException("Username already exists");
        }

        if (userRepository.existsByEmail(registrationDTO.getEmail())) {
            throw new IllegalArgumentException("Email already exists");
        }

        // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º
        String encodedPassword = passwordEncoder.encode(registrationDTO.getPassword());
        if (encodedPassword == null || encodedPassword.isEmpty()) {
            throw new IllegalStateException("Failed to encode password");
        }

        User user = User.builder()
                .username(registrationDTO.getUsername())
                .email(registrationDTO.getEmail())
                .role(UserRole.USER)
                .createdAt(LocalDateTime.now())
                .password(encodedPassword)
                .balance(BigDecimal.ZERO)
                .locked(false)
                .build();
        return userRepository.save(user);
    }

    public List<UserSearchDTO> searchUsers(String query, String currentUsername) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–µ—à–∞
        Cache cache = cacheManager.getCache("userSearch");
        String cacheKey = "search:" + (query != null ? query.toLowerCase().trim() : "") +
                ":user:" + currentUsername;

        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ –∫–µ—à–∞
        List<UserSearchDTO> cachedResults = cache != null ?
                (List<UserSearchDTO>) cache.get(cacheKey, List.class) : null;

        if (cachedResults != null) {
            log.debug("‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∏–∑ –∫–µ—à–∞ {} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: '{}'",
                    cachedResults.size(), query);
            return cachedResults;
        }

        // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—É—Å—Ç–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        if (!StringUtils.hasText(query)) {
            return Collections.emptyList();
        }

        // –ï—Å–ª–∏ –≤ –∫–µ—à–µ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
        long startTime = System.currentTimeMillis();
        String normalizedQuery = query.toLowerCase().trim();
        log.debug("‚õî –ü–æ–∏—Å–∫ –≤ –ë–î –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{}'", normalizedQuery);

        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        List<UserSearchDTO> results = userRepository.searchByUsername(normalizedQuery)
                .stream()
                .map(user -> userMapper.toSearchDTO(user, currentUsername))
                .collect(Collectors.toList());

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∫–µ—à
        if (cache != null) {
            cache.put(cacheKey, results);
            log.debug("üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫–µ—à –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: '{}'", normalizedQuery);
        }

        // –õ–æ–≥–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        long endTime = System.currentTimeMillis();
        log.debug("üîπ –ù–∞–π–¥–µ–Ω–æ –≤ –ë–î {} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{}' –∑–∞ {} –º—Å",
                results.size(), normalizedQuery, endTime - startTime);

        return results;
    }


    public User findByUsername(String username) {
        return userRepository.findByUsername(username)
                .orElseThrow(() -> new UsernameNotFoundException("User not found with username: " + username));
    }



    @Transactional
    public void updateUsername(String oldUsername, String newUsername) {
        if (userRepository.existsByUsername(newUsername)) {
            throw new IllegalArgumentException("Username already exists: " + newUsername);
        }

        User user = userRepository.findByUsername(oldUsername)
                .orElseThrow(() -> new UsernameNotFoundException("User not found: " + oldUsername));

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        Authentication auth = SecurityContextHolder.getContext().getAuthentication();

        user.setUsername(newUsername);
        userRepository.save(user);

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ UserDetails —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º
        UserDetails updatedUser = org.springframework.security.core.userdetails.User
                .withUsername(newUsername)
                .password(user.getPassword())
                .authorities(auth.getAuthorities())
                .build();

        // –û–±–Ω–æ–≤–ª—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–∞–≤
        Authentication newAuth = new UsernamePasswordAuthenticationToken(
                updatedUser,
                user.getPassword(),
                auth.getAuthorities()
        );

        SecurityContextHolder.getContext().setAuthentication(newAuth);
    }


    public User updateCover(String username, byte[] cover) {
        User user = findByUsername(username);
        user.setCover(cover);
        return userRepository.save(user);
    }

    public User updateAvatar(String username, byte[] avatar) {
        User user = findByUsername(username);
        user.setAvatar(avatar);
        return userRepository.save(user);
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ –∞–¥–º–∏–Ω–∞
    public User promoteToAdmin(String username) {
        User user = findByUsername(username);
        user.setRole(UserRole.ADMIN);
        return userRepository.save(user);
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–Ω–∏–∂–µ–Ω–∏—è –ø—Ä–∞–≤
    public User demoteToUser(String username) {
        User user = findByUsername(username);
        user.setRole(UserRole.USER);
        return userRepository.save(user);
    }
    public List<User> getAllUsers() {
        return userRepository.findAll();
    }

    public User updateUserRole(String username, UserRole newRole) {
        User user = findByUsername(username);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ–±—ã –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–¥–º–∏–Ω –Ω–µ –º–æ–≥ —Å–Ω—è—Ç—å —Å —Å–µ–±—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
        if (user.getRole() == UserRole.ADMIN && newRole != UserRole.ADMIN) {
            long adminCount = userRepository.countByRole(UserRole.ADMIN);
            if (adminCount <= 1) {
                throw new IllegalStateException("Cannot remove the last administrator");
            }
        }

        user.setRole(newRole);
        return userRepository.save(user);
    }

    public List<User> searchUsers(String query) {
        log.debug("Performing database search for users with query: '{}'", query);

        if (query == null || query.trim().isEmpty()) {
            log.debug("Search query is empty, returning empty list");
            return Collections.emptyList();
        }

        String trimmedQuery = query.trim();
        List<User> results = userRepository.findByUsernameContainingIgnoreCase(trimmedQuery);
        log.debug("Found {} users matching query: '{}'", results.size(), trimmedQuery);

        return results;
    }


    public long getTotalUsersCount() {
        return userRepository.count();
    }



    public double getNewRegistrationsGrowth() {
        // –ü—Ä–æ—Ü–µ–Ω—Ç —Ä–æ—Å—Ç–∞ –Ω–æ–≤—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü
        LocalDateTime monthAgo = LocalDateTime.now().minusMonths(1);
        long previousCount = userRepository.countByCreatedAtBefore(monthAgo);
        long currentCount = userRepository.count();
        return previousCount > 0 ? ((currentCount - previousCount) * 100.0) / previousCount : 0;
    }

    public double getEngagementRate() {
        // –ú–æ–∂–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        return 73.0; // –ó–∞–≥–ª—É—à–∫–∞, —Ä–µ–∞–ª–∏–∑—É–π—Ç–µ —Å–≤–æ—é –ª–æ–≥–∏–∫—É
    }

    public User findById(Long id) {
        return userRepository.findById(id)
                .orElseThrow(() -> new UserNotFoundException("User not found with id: " + id));
    }


    public void changePassword(String username, ChangePasswordDTO passwordDTO) {
        log.debug("Changing password for user: {}", username);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if (passwordDTO.getNewPassword() == null || passwordDTO.getNewPassword().isEmpty()) {
            throw new IllegalArgumentException("New password cannot be empty");
        }

        if (!passwordDTO.getNewPassword().equals(passwordDTO.getConfirmPassword())) {
            throw new IllegalArgumentException("Passwords do not match");
        }

        User user = findByUsername(username);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ –ø–∞—Ä–æ–ª—è
        if (!passwordEncoder.matches(passwordDTO.getOldPassword(), user.getPassword())) {
            throw new IllegalArgumentException("Current password is incorrect");
        }

        // –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è
        String encodedPassword = passwordEncoder.encode(passwordDTO.getNewPassword());
        if (encodedPassword == null || encodedPassword.isEmpty()) {
            throw new IllegalStateException("Failed to encode new password");
        }

        user.setPassword(encodedPassword);
        userRepository.save(user);
        log.info("Password changed successfully for user: {}", username);
    }



    // –ú–µ—Ç–æ–¥ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    public void lockUser(String username, String reason) {
        User user = userRepository.findByUsername(username)
                .orElseThrow(() -> new UsernameNotFoundException("User not found"));

        user.setLocked(true);
        user.setLockedAt(LocalDateTime.now());
        user.setLockReason(reason);

        userRepository.save(user);
        log.info("User {} has been locked. Reason: {}", username, reason);
    }


    // –ú–µ—Ç–æ–¥ –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    public void unlockUser(String username) {
        User user = userRepository.findByUsername(username)
                .orElseThrow(() -> new UsernameNotFoundException("User not found"));

        user.setLocked(false);
        user.setLockedAt(null);
        user.setLockReason(null);

        userRepository.save(user);
        log.info("User {} has been unlocked", username);
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    public boolean isUserLocked(String username) {
        return userRepository.findByUsername(username)
                .map(User::isLocked)
                .orElseThrow(() -> new UsernameNotFoundException("User not found"));
    }

    public User findByEmail(String email) {
       return userRepository.findByEmail(email);
    }

    public void save(User user) {
        userRepository.save(user);
    }


//–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å
    @Transactional
    public BlockInfoDTO blockUser(String blockerUsername, String blockedUsername) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if (blockerUsername == null || blockedUsername == null) {
            throw new IllegalArgumentException("Username cannot be null");
        }

        User blocker = findByUsername(blockerUsername);
        User blocked = findByUsername(blockedUsername);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–∞–º —Å–µ–±—è
        if (blocker.getId().equals(blocked.getId())) {
            throw new IllegalArgumentException("–ù–µ–ª—å–∑—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è");
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if (isUserBlocked(blockerUsername, blockedUsername)) {
            throw new IllegalStateException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω");
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
        blocker.getBlockedUsers().add(blocked);
        userRepository.save(blocker); // –Ø–≤–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è

        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
        BlockInfo blockInfo = userMapper.toBlockInfo(blocker, blocked);
        blockInfoRepository.save(blockInfo);

        log.info("User {} blocked user {}", blockerUsername, blockedUsername);
        return userMapper.toBlockInfoDTO(blockInfo);
    }
//—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å
    @Transactional
    public void unblockUser(String blockerUsername, String blockedUsername) {
        if (blockerUsername == null || blockedUsername == null) {
            throw new IllegalArgumentException("Username cannot be null");
        }

        User blocker = findByUsername(blockerUsername);
        User blocked = findByUsername(blockedUsername);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if (!isUserBlocked(blockerUsername, blockedUsername)) {
            throw new IllegalStateException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω");
        }

        // –£–¥–∞–ª—è–µ–º –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
        blocker.getBlockedUsers().remove(blocked);
        userRepository.save(blocker); // –Ø–≤–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è

        // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
        blockInfoRepository.deleteByBlockerAndBlocked(blocker, blocked);

        log.info("User {} unblocked user {}", blockerUsername, blockedUsername);
    }


//—á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
@Transactional(readOnly = true)
public Page<BlockedUserDTO> getBlockedUsers(String username) {
    if (username == null) {
        throw new IllegalArgumentException("Username cannot be null");
    }

    User user = findByUsername(username);
    // –°–æ–∑–¥–∞–µ–º Pageable –¥–ª—è –ø–µ—Ä–≤—ã—Ö 20 –∑–∞–ø–∏—Å–µ–π, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –¥–∞—Ç–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    Pageable pageable = PageRequest.of(0, 20, Sort.by(Sort.Direction.DESC, "blockedAt"));

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞–º–∏
    Page<BlockInfo> blockInfoPage = blockInfoRepository.findByBlocker(user, pageable);

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DTO
    return blockInfoPage.map(blockInfo -> userMapper.toBlockedUserDTO(blockInfo.getBlocked(), blockInfo));
}

    @Transactional(readOnly = true)
    public boolean isUserBlocked(String blockerUsername, String blockedUsername) {
        if (blockerUsername == null || blockedUsername == null) {
            return false;
        }

        try {
            User blocker = findByUsername(blockerUsername);
            User blocked = findByUsername(blockedUsername);
            return blockInfoRepository.existsByBlockerAndBlocked(blocker, blocked);
        } catch (UsernameNotFoundException e) {
            return false;
        }
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    @Transactional(readOnly = true)
    public long getBlockedUsersCount(String username) {
        if (username == null) {
            throw new IllegalArgumentException("Username cannot be null");
        }

        User user = findByUsername(username);
        return blockInfoRepository.countByBlocker(user);
    }

    private final SecureRandom random = new SecureRandom();
    private static final int MIN_REWARD = 1;
    private static final int MAX_REWARD = 5;

    public Optional<BigDecimal> claimDailyReward(String username) {
        return userRepository.findByUsername(username)
                .map(user -> {
                    if (user.getLastRewardDate() != null && user.getLastRewardDate().isEqual(LocalDate.now())) {
                        return Optional.<BigDecimal>empty(); // –£–∂–µ –ø–æ–ª—É—á–∞–ª –Ω–∞–≥—Ä–∞–¥—É
                    }

                    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É
                    int reward = random.nextInt(MAX_REWARD - MIN_REWARD + 1) + MIN_REWARD;
                    BigDecimal rewardAmount = BigDecimal.valueOf(reward);

                    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏ –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –Ω–∞–≥—Ä–∞–¥—ã
                    user.setBalance(user.getBalance().add(rewardAmount));
                    user.setLastRewardDate(LocalDate.now());
                    userRepository.save(user);

                    return Optional.of(rewardAmount);
                })
                .orElse(Optional.empty()); // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
    }


    public boolean canClaimDailyReward(String username) {
        return userRepository.findByUsername(username)
                .map(user -> user.getLastRewardDate() == null || !user.getLastRewardDate().isEqual(LocalDate.now()))
                .orElse(false);
    }

    public Optional<BigDecimal> claimPageVisitReward(String username) {
        final BigDecimal PAGE_VISIT_REWARD = BigDecimal.ONE; // 1 –±–æ–Ω—É—Å –∑–∞ –ø–æ—Å–µ—â–µ–Ω–∏–µ

        return userRepository.findByUsername(username)
                .map(user -> {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª—É—á–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–≥—Ä–∞–¥—É —Å–µ–≥–æ–¥–Ω—è
                    if (user.getLastPageVisitDate() != null &&
                            user.getLastPageVisitDate().isEqual(LocalDate.now())) {
                        return Optional.<BigDecimal>empty(); // –£–∂–µ –ø–æ–ª—É—á–∞–ª –Ω–∞–≥—Ä–∞–¥—É —Å–µ–≥–æ–¥–Ω—è
                    }

                    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏ –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å–µ—â–µ–Ω–∏—è
                    user.setBalance(user.getBalance().add(PAGE_VISIT_REWARD));
                    user.setLastPageVisitDate(LocalDate.now());
                    userRepository.save(user);

                    return Optional.of(PAGE_VISIT_REWARD);
                })
                .orElse(Optional.empty());
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã
    public boolean canClaimPageVisitReward(String username) {
        return userRepository.findByUsername(username)
                .map(user -> user.getLastPageVisitDate() == null ||
                        !user.getLastPageVisitDate().isEqual(LocalDate.now()))
                .orElse(false);
    }
}