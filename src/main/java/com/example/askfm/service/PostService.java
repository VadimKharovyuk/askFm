
package com.example.askfm.service;

import com.example.askfm.dto.PostCreateDTO;
import com.example.askfm.dto.PostDTO;
import com.example.askfm.exception.PostNotFoundException;
import com.example.askfm.maper.PostMapper;
import com.example.askfm.model.*;
import com.example.askfm.repository.*;
import jakarta.persistence.EntityNotFoundException;
import jakarta.validation.constraints.NotNull;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.cache.Cache;
import org.springframework.cache.CacheManager;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.io.IOException;
import java.time.LocalDateTime;
import java.util.*;
import java.util.stream.Collectors;

@Service
@Transactional
@Slf4j
@RequiredArgsConstructor
public class PostService {
    private final PostRepository postRepository;
    private final UserRepository userRepository;
    private final ImageService imageService;
    private final PostViewRepository postViewRepository;
    private final TagRepository tagRepository;
    private final MentionService mentionService;
    private final PostReportRepository postReportRepository;
    private final RepostRepository repostRepository;
    private final PostMapper postMapper;
    private final CacheManager cacheManager;
    private final NotificationService notificationService;


    public List<PostDTO> getUserPosts(String username, String currentUsername) {
        Cache cache = cacheManager.getCache("posts");
        String cacheKey = "posts:" + username + ":" + currentUsername;

        List<PostDTO> cachedPosts = cache != null ?
                (List<PostDTO>) cache.get(cacheKey, List.class) : null;

        if (cachedPosts != null) {
            log.debug("‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –ø–æ—Å—Ç—ã –∏–∑ –∫–µ—à–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}, –∑–∞–ø—Ä–æ—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {}",
                    username, currentUsername, cachedPosts.size());
            return cachedPosts;
        }

        log.debug("‚õî –ü–æ–∏—Å–∫ –≤ –ë–î: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", username);

        List<Post> originalPosts = postRepository.findByAuthorUsernameOrderByPublishedAtDesc(username);
        log.debug("üîπ –ù–∞–π–¥–µ–Ω–æ {} –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤", originalPosts.size());

        List<Repost> reposts = repostRepository.findByUserUsernameOrderByRepostedAtDesc(username);
        log.debug("üîπ –ù–∞–π–¥–µ–Ω–æ {} —Ä–µ–ø–æ—Å—Ç–æ–≤", reposts.size());

        List<PostDTO> allPosts = new ArrayList<>();

        // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –ø–æ—Å—Ç—ã
        allPosts.addAll(originalPosts.stream()
                .map(post -> postMapper.toDto(post, currentUsername))
                .toList());

        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–ø–æ—Å—Ç—ã
        allPosts.addAll(reposts.stream()
                .map(repost -> postMapper.toDtoWithRepost(
                        repost.getOriginalPost(),
                        currentUsername,
                        username,
                        repost.getRepostedAt()))
                .toList());

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã –ø–æ –¥–∞—Ç–µ
        List<PostDTO> sortedPosts = allPosts.stream()
                .sorted(Comparator.comparing(post ->
                                post.getRepostedAt() != null ? post.getRepostedAt() : post.getPublishedAt(),
                        Comparator.reverseOrder()))
                .collect(Collectors.toList());

        cache.put(cacheKey, sortedPosts);
        log.debug("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∫–µ—à {} –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {} (–∫–ª—é—á: {})",
                sortedPosts.size(), username, cacheKey);

        return sortedPosts;
    }


    public Post createPost(String username, PostCreateDTO postDTO) {
        log.debug("üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", username);

        User author = userRepository.findByUsername(username)
                .orElseThrow(() -> {
                    log.error("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞: {}", username);
                    return new UsernameNotFoundException("User not found: " + username);
                });

        byte[] mediaBytes = processMedia(postDTO);
        log.debug("üñºÔ∏è –û–±—Ä–∞–±–æ—Ç–∞–Ω—ã –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã –¥–ª—è –ø–æ—Å—Ç–∞");

        Set<Tag> tags = processTags(postDTO.getTags());
        log.debug("üè∑Ô∏è –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {} —Ç–µ–≥–æ–≤ –¥–ª—è –ø–æ—Å—Ç–∞", tags.size());

        Post post = Post.builder()
                .author(author)
                .content(postDTO.getContent())
                .media(mediaBytes)
                .publishedAt(LocalDateTime.now())
                .tags(tags)
                .build();

        Set<User> mentionedUsers = mentionService.extractMentions(postDTO.getContent());
        post.setMentionedUsers(mentionedUsers);
        log.debug("üë• –ò–∑–≤–ª–µ—á–µ–Ω–æ {} —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ—Å—Ç–∞", mentionedUsers.size());

        Post savedPost = postRepository.save(post);
        log.debug("‚ú® –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –ø–æ—Å—Ç —Å ID: {}", savedPost.getId());

        // –û—á–∏—â–∞–µ–º –∫–µ—à –ø–æ—Å—Ç–æ–≤ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞
        Cache cache = cacheManager.getCache("posts");
        if (cache != null) {
            cache.clear();
            log.debug("üßπ –ö–µ—à –ø–æ—Å—Ç–æ–≤ –æ—á–∏—â–µ–Ω –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞");
        }

        return savedPost;
    }


    private byte[] processMedia(PostCreateDTO postDTO) {
        if (postDTO.getMedia() != null && !postDTO.getMedia().isEmpty()) {
            try {
                return imageService.resizeImage(postDTO.getMedia().getBytes(), 800);
            } catch (IOException e) {
                throw new RuntimeException("Failed to process image", e);
            }
        }
        return null;
    }

    private Set<Tag> processTags(String tagsString) {
        return Arrays.stream(tagsString.split(","))
                .map(String::trim)
                .filter(tag -> !tag.isEmpty())
                .map(tagName -> tagRepository.findByName(tagName)
                        .orElseGet(() -> tagRepository.save(Tag.builder().name(tagName).build())))
                .collect(Collectors.toSet());
    }

    //    @Transactional
//    public void likePost(Long postId, String username) {
//        log.debug("üìù –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ª–∞–π–∫–∞ –ø–æ—Å—Ç–∞: {} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {}", postId, username);
//
//        Post post = findById(postId);
//        User user = userRepository.findByUsername(username)
//                .orElseThrow(() -> {
//                    log.error("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {}", username);
//                    return new UsernameNotFoundException("User not found: " + username);
//                });
//
//        try {
//            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ª–∞–π–∫–∞–µ—Ç —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–æ—Å—Ç
//            if (!post.getAuthor().equals(user)) {
//                notificationService.notifyAboutLike(user, post);
//                log.debug("üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ª–∞–π–∫–µ –∞–≤—Ç–æ—Ä—É –ø–æ—Å—Ç–∞: {}",
//                        post.getAuthor().getUsername());
//            }
//
//            // –î–æ–±–∞–≤–ª—è–µ–º –ª–∞–π–∫
//            if (post.getLikedBy().add(user)) {
//                postRepository.save(post);
//                log.debug("‚úÖ –õ–∞–π–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∫ –ø–æ—Å—Ç—É: {}", postId);
//            } else {
//                log.debug("‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ª–∞–π–∫–Ω—É–ª —ç—Ç–æ—Ç –ø–æ—Å—Ç");
//            }
//
//        } catch (Exception e) {
//            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ª–∞–π–∫–∞ –∫ –ø–æ—Å—Ç—É {}: {}",
//                    postId, e.getMessage());
//            throw e;
//        }
//    }
//
//    private Post findById(Long postId) {
//        return postRepository.findById(postId)
//                .orElseThrow(() -> {
//                    log.error("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {}", postId);
//                    return new PostNotFoundException("Post not found with id: " + postId);
//                });
//    }
    @Transactional
    public void likePost(Long postId, String username) {

        Post post = findById(postId);
        User user = userRepository.findByUsername(username)
                .orElseThrow(() -> new UsernameNotFoundException("User not found"));
        notificationService.notifyAboutLike(user, post);
        if (post.getLikedBy().add(user)) {
            postRepository.save(post);
        }

    }

    @Transactional
    public void unlikePost(Long postId, String username) {
        Post post = findById(postId);
        User user = userRepository.findByUsername(username)
                .orElseThrow(() -> new UsernameNotFoundException("User not found"));

        if (post.getLikedBy().remove(user)) {
            postRepository.save(post);
            log.debug("User {} unliked post {}", username, postId);
        }
    }

    @Transactional
    public void deletePostAdmin(Long postId) {
        log.debug("Admin deleting post: {}", postId);
        postViewRepository.deleteByPostId(postId);
        tagRepository.deleteByPostId(postId);
        postRepository.deleteById(postId);
        postReportRepository.deleteById(postId);
    }

    @Transactional
    public void deletePost(Long postId) {
        log.debug("üìù –ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞: {}", postId);

        Post post = findById(postId);
        String authorUsername = post.getAuthor().getUsername();

        postViewRepository.deleteByPostId(postId);
        log.debug("üëÅÔ∏è –£–¥–∞–ª–µ–Ω—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –¥–ª—è –ø–æ—Å—Ç–∞: {}", postId);

        tagRepository.deleteByPostId(postId);
        log.debug("üè∑Ô∏è –£–¥–∞–ª–µ–Ω—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–µ–≥–∏ –¥–ª—è –ø–æ—Å—Ç–∞: {}", postId);

        postRepository.delete(post);
        log.debug("‚ú® –ü–æ—Å—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –ë–î: {}", postId);

        // –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞
        Cache cache = cacheManager.getCache("posts");
        if (cache != null) {
            // –û—á–∏—â–∞–µ–º –∫–µ—à –ø–æ—Å—Ç–æ–≤ –∞–≤—Ç–æ—Ä–∞
            String authorCacheKey = "posts:" + authorUsername + ":*";
            cache.evict(authorCacheKey);
            log.debug("üßπ –û—á–∏—â–µ–Ω –∫–µ—à –ø–æ—Å—Ç–æ–≤ –∞–≤—Ç–æ—Ä–∞: {}", authorUsername);

            // –û—á–∏—â–∞–µ–º –æ–±—â–∏–π –∫–µ—à
            cache.clear();
            log.debug("üßπ –û—á–∏—â–µ–Ω –æ–±—â–∏–π –∫–µ—à –ø–æ—Å—Ç–æ–≤");
        }

        log.info("‚úÖ –ü–æ—Å—Ç {} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω", postId, authorUsername);
    }


    @Transactional
    public void incrementViews(Long postId, String username) {
        Post post = findById(postId);
        User user = userRepository.findByUsername(username)
                .orElseThrow(() -> new UsernameNotFoundException("User not found"));

        if (postViewRepository.findByPostAndUser(post, user).isEmpty()) {
            PostView view = PostView.builder()
                    .post(post)
                    .user(user)
                    .viewedAt(LocalDateTime.now())
                    .build();
            postViewRepository.save(view);

        }
    }

    public long getPostViews(Long postId) {
        Cache viewsCache = cacheManager.getCache("views");
        String cacheKey = "post_views_count:" + postId;

        Long viewsCount = viewsCache.get(cacheKey, Long.class);
        if (viewsCount != null) {
            log.debug("‚úÖ –í–∑—è—Ç–æ –∑ –∫–µ—à—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤ –¥–ª—è –ø–æ—Å—Ç–∞ {}: {}", postId, viewsCount);
            return viewsCount;
        }

        log.debug("‚õî –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤ –≤ –ë–î –¥–ª—è –ø–æ—Å—Ç–∞ {}", postId);
        viewsCount = postViewRepository.countByPostId(postId);

        viewsCache.put(cacheKey, viewsCount);
        log.debug("üîπ –ó–Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î {} –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤ –¥–ª—è –ø–æ—Å—Ç–∞ {}", viewsCount, postId);
        return viewsCount;
    }
//
//    public long getPostViews(Long postId) {
//        return postViewRepository.countByPostId(postId);
//    }


    public Post getPost(Long postId) {
        return findById(postId);
    }

    public Page<PostDTO> findPostsByTags(String tags, String currentUsername, Pageable pageable) {
        if (tags == null || tags.trim().isEmpty()) {
            return Page.empty(pageable);
        }

        String cleanTag = tags.replace("[", "").replace("]", "").trim();
        Page<Post> posts = postRepository.findByTagNameContaining(cleanTag, pageable);
        return posts.map(post -> postMapper.toDto(post, currentUsername));
    }

    @Transactional(readOnly = true)
    public PostDTO getPostDetails(Long postId, String currentUsername) {

        Post post = findById(postId);

        // –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–π PostDTO —á–µ—Ä–µ–∑ –º–∞–ø–ø–µ—Ä
        PostDTO postDTO = postMapper.toDto(post, currentUsername);

        // –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–ø–æ—Å—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–ø–æ—Å—Ç–µ
        if (!post.getReposts().isEmpty()) {
            Repost repost = post.getReposts().get(0);
            postDTO.setRepostedBy(repost.getUser().getUsername());
            postDTO.setRepostedAt(repost.getRepostedAt());
            postDTO.setOriginalAuthorUsername(post.getAuthor().getUsername());
            postDTO.setOriginalPublishedAt(post.getPublishedAt());
        }

        return postDTO;
    }

    public Post findById(@NotNull(message = "ID –ø–æ—Å—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω") Long postId) {
        return postRepository.findById(postId)
                .orElseThrow(() -> new PostNotFoundException(postId));
    }
}
