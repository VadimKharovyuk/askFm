package com.example.askfm.service;

import com.example.askfm.EventListener.*;
import com.example.askfm.dto.NotificationDTO;
import com.example.askfm.enums.NotificationType;
import com.example.askfm.exception.NotificationNotFoundException;
import com.example.askfm.exception.UnauthorizedException;
import com.example.askfm.maper.NotificationMapper;
import com.example.askfm.model.*;
import com.example.askfm.repository.NotificationRepository;
import com.example.askfm.repository.SubscriptionRepository;
import com.example.askfm.repository.UserRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.context.ApplicationEventPublisher;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.List;

@Service
@Slf4j
@RequiredArgsConstructor
public class NotificationService {
    private final NotificationRepository notificationRepository;
    private final NotificationMapper notificationMapper;
    private final ApplicationEventPublisher eventPublisher;
    private final SubscriptionRepository subscriptionRepository;
    private final UserRepository userRepository;

    public List<NotificationDTO> getUserNotifications(String username) {
        log.debug("–ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", username);
        List<Notification> notifications = notificationRepository
                .findByUserUsernameOrderByCreatedAtDesc(username);
        return notificationMapper.toDtoList(notifications);
    }

    @Transactional
    public void deleteAllUserNotifications(String username) {
        log.debug("–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", username);
        notificationRepository.deleteByUserUsername(username);
        log.info("–í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} —É–¥–∞–ª–µ–Ω—ã", username);
    }

    @Transactional
    public void markAsRead(Long notificationId, String username) {
        log.debug("–û—Ç–º–µ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ: {}", notificationId);

        Notification notification = notificationRepository.findById(notificationId)
                .orElseThrow(() -> new NotificationNotFoundException(notificationId));

        if (!notification.getUser().getUsername().equals(username)) {
            log.error("–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–º–µ—Ç–∏—Ç—å —á—É–∂–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {}", notificationId);
            throw new UnauthorizedException("Cannot mark another user's notification as read");
        }

        notification.setRead(true);
        notificationRepository.save(notification);
        log.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {} –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ", notificationId);
    }

    public long getUnreadCount(String username) {
        return notificationRepository.countByUserUsernameAndIsReadFalse(username);
    }

    public void notifyAboutPhotoEvent(User buyer, Photo photo) {
        log.debug("üöÄ –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è –æ –ø–æ–∫—É–ø–∫–µ —Ñ–æ—Ç–æ: buyer={}, photoId={}",
                buyer.getUsername(), photo.getId());

        try {
            eventPublisher.publishEvent(new PhotoPurchaseEvent(buyer, photo));
            log.debug("‚úÖ –°–æ–±—ã—Ç–∏–µ –æ –ø–æ–∫—É–ø–∫–µ —Ñ–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ");
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è –æ –ø–æ–∫—É–ø–∫–µ —Ñ–æ—Ç–æ: {}", e.getMessage());
            throw e;
        }
    }

    public void notifyAboutLike(User liker, Post post) {

        eventPublisher.publishEvent(new LikeEvent(liker, post));
    }

    public void notifyAboutComment(User commenter, Post post) {
        log.debug("üöÄ –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –æ—Ç {} –¥–ª—è –ø–æ—Å—Ç–∞ {}",
                commenter.getUsername(), post.getId());
        eventPublisher.publishEvent(new CommentEvent(commenter, post));
    }

    public void notifyAboutSubscription(User subscriber, User targetUser) {
        log.debug("üöÄ –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {} –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ {}",
                subscriber.getUsername(), targetUser.getUsername());

        try {
            eventPublisher.publishEvent(new SubscriptionEvent(subscriber, targetUser));
            log.info("‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏: {} ‚Üí {}",
                    subscriber.getUsername(), targetUser.getUsername());
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ {} –Ω–∞ {}: {}",
                    subscriber.getUsername(), targetUser.getUsername(), e.getMessage());
            throw e;
        }
    }

    public void notifyAboutRepost(User user, Repost repost) {
        try {
            eventPublisher.publishEvent(new RepostEvent(user, repost));
        } catch (Exception e) {
            log.error("Failed to publish repost event: user={}, repost={}", user.getUsername(), repost.getId(), e);
            throw new NotificationNotFoundException(repost.getId());
        }
    }

    @Transactional
    public void deleteNotification(Long notificationId, String username) {
        Notification notification = notificationRepository.findById(notificationId)
                .orElseThrow(() -> new NotificationNotFoundException(notificationId));

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if (!notification.getUser().getUsername().equals(username)) {
            throw new UnauthorizedException("Cannot delete another user's notification");
        }

        notificationRepository.delete(notification);
        log.debug("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {} —É–¥–∞–ª–µ–Ω–æ", notificationId);
    }


    public void notifyAboutEventCreation(Event event, User creator) {
        log.debug("üöÄ –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: {} —Å–æ–∑–¥–∞–ª —Å–æ–±—ã—Ç–∏–µ {}",
                creator.getUsername(), event.getTitle());

        try {
            EventEvent eventEvent = EventEvent.createEvent(event, creator);
            eventPublisher.publishEvent(eventEvent);
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è {} –æ—Ç {}: {}",
                    event.getTitle(), creator.getUsername(), e.getMessage());
            throw e;
        }
    }

    public void notifyAboutEventUpdate(Event event, User updater) {
        log.debug("üöÄ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: {} –æ–±–Ω–æ–≤–∏–ª —Å–æ–±—ã—Ç–∏–µ {}",
                updater.getUsername(), event.getTitle());

        try {
            EventEvent eventEvent = EventEvent.updateEvent(event, updater);
            eventPublisher.publishEvent(eventEvent);
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è {} –æ—Ç {}: {}",
                    event.getTitle(), updater.getUsername(), e.getMessage());
            throw e;
        }
    }


    @Transactional
    public void createCancelEventNotifications(Event event, User canceller) {
        List<Long> subscriberIds = subscriptionRepository.findSubscriberIdsBySubscribedToId(event.getCreator().getId());

        if (!subscriberIds.isEmpty()) {
            LocalDateTime now = LocalDateTime.now();
            String message = canceller.getUsername() + " " + NotificationType.EVENT_CANCELLED.getActionMessage();

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏–∏ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
            String eventTitle = event.getTitle();
            Long eventId = event.getId();

            for (Long subscriberId : subscriberIds) {
                try {
                    Notification notification = Notification.builder()
                            .user(userRepository.getReferenceById(subscriberId))
                            .initiator(canceller)
                            .type(NotificationType.EVENT_CANCELLED)  // –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø
                            .message(message)
                            .createdAt(now)
                            .isRead(false)
                            .build();

                    notificationRepository.save(notification);

                    log.debug("üì® –°–æ–∑–¥–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ {}", subscriberId);
                } catch (Exception e) {
                    log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ {}: {}", subscriberId, e.getMessage());
                }
            }

            log.info("‚úÖ –°–æ–∑–¥–∞–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–º–µ–Ω–µ —Å–æ–±—ã—Ç–∏—è '{}' –¥–ª—è {} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤",
                    eventTitle, subscriberIds.size());
        }
    }
}
